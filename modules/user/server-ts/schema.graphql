type User {
  id: Int!
  username: String!
  role: String!
  isActive: Boolean
  email: String!
  profile: UserProfile
  addresses: [UserAddress]
  identification: [UserIdentification]
  verification: UserVerification
  endorsements: [UserEndorsement]
  endorsed: [UserEndorsed]
  followers: [UserFollower]
  following: [UserFollowing]
  portfolios: [UserPortfolio]
  remarks: [UserRemark]

  authCertificate: CertificateAuth
  authFacebook: FacebookAuth
  authGoogle: GoogleAuth
  authGithub: GithubAuth
  authLinkedin: LinkedInAuth

  createdAt: String
  updatedAt: String
}

type UserProfile {
  id: Int
  firstName: String
  lastName: String
  isVerified: Boolean
  isAvailable: Boolean
  website: String
  about: String
  designation: String
  avatar: String
  rating: String
  responseTime: String
  acceptanceRate: String
  mobile: String
  flag: String
  createdAt: String
  updatedAt: String
  referredBy: User
}

type UserIdentification {
  id: Int
  type: String
  documentUrl: String
  isVerified: Boolean
  createdAt: String
  updatedAt: String
}

type UserAddress {
  id: Int
  streetAddress1: String
  streetAddress2: String
  city: String
  state: String
  pinCode: String
  createdAt: String
  updatedAt: String
}

type UserVerification {
  id: Int
  isEmailVerified: Boolean
  isMobileVerified: Boolean
  isAddressVerified: Boolean
  isIdVerified: Boolean
  isReferred: Boolean
  createdAt: String
  updatedAt: String

}

type UserEndorsement {
  id: Int
  endorser: User
  createdAt: String
  updatedAt: String
}

type UserEndorsed {
  id: Int
  endorsee: User
  createdAt: String
  updatedAt: String
}


type UserFollower {
  id: Int
  follower: User
  createdAt: String
  updatedAt: String

}

type UserFollowing {
  id: Int
  followee: User
  createdAt: String
  updatedAt: String
}

type UserPortfolio {
  id: Int
  platform: String
  portfolioUrl: String
  createdAt: String
  updatedAt: String
}

type UserRemark {
  id: Int
  type: String
  remark: String
  admin: User
  createdAt: String
  updatedAt: String
}


# Additional authentication service info
type UserAuth {
  certificate: CertificateAuth
  facebook: FacebookAuth
  google: GoogleAuth
  github: GithubAuth
  linkedin: LinkedInAuth
}

type CertificateAuth {
  serial: String
  createdAt: String
  updatedAt: String
}

type FacebookAuth {
  fbId: String
  displayName: String
  createdAt: String
  updatedAt: String

}

type GoogleAuth {
  googleId: String
  displayName: String
  createdAt: String
  updatedAt: String
}

type GithubAuth {
  ghId: String
  displayName: String
  createdAt: String
  updatedAt: String
}

type LinkedInAuth {
  lnId: String
  displayName: String
  createdAt: String
  updatedAt: String

}

extend type Query {
  # Get all users ordered by: OrderByUserInput add filtered by: FilterUserInput
  users(orderBy: OrderByUserInput, filter: FilterUserInput): [User]
  # Get user by id
  user(id: Int!): User
  # Get current user
  currentUser: User
}

type UserPayload {
  user: User
}

extend type Mutation {
  # Create new user
  addUser(input: AddUserInput!): User!
  # Edit a user
  editUser(input: EditUserInput!): User!
  # Delete a user
  deleteUser(id: Int!): UserPayload!
}

# Input for ordering users
input OrderByUserInput {
  # id | username | role | isActive | email
  column: String
  # asc | desc
  order: String
}

# Input for filtering users
input FilterUserInput {
  # search by username or email
  searchText: String
  # filter by role
  role: String
  # filter by isActive
  isActive: Boolean
}

# Additional authentication service info
input AuthInput {
  certificate: AuthCertificateInput
  facebook: AuthFacebookInput
  google: AuthGoogleInput
  github: AuthGitHubInput
  linkedin: AuthLinkedInInput
}

input AuthCertificateInput {
  serial: String
}

input AuthFacebookInput {
  fbId: String
  displayName: String
}

input AuthGoogleInput {
  googleId: String
  displayName: String
}

input AuthGitHubInput {
  ghId: String
  displayName: String
}

input AuthLinkedInInput {
  lnId: String
  displayName: String
}

# Input for addUser Mutation
input AddUserInput {
  username: String!
  email: String!
  password: String!
  role: String!
  isActive: Boolean
  profile: ProfileInput
  auth: AuthInput
}

# Input for editUser Mutation
input EditUserInput {
  id: Int!
  username: String!
  role: String!
  isActive: Boolean
  email: String!
  password: String
  profile: ProfileInput
  auth: AuthInput
}

input ProfileInput {
  firstName: String
  lastName: String
}

extend type Subscription {
  # Subscription for users list
  usersUpdated(filter: FilterUserInput): UpdateUserPayload
}

# Payload for usersUpdated Subscription
type UpdateUserPayload {
  mutation: String!
  node: User!
}
