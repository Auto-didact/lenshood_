type Listing {
  id: Int!

  # User module
  user: User

  gearCategory: String!
  gearSubcategory: String!
  description: String
  status: String
  isActive: Boolean
  isFeatured: Boolean
  listingImages: [ListingImage]
  listingDetail: ListingDetail
  listingRental: ListingRental
  listingContent: [ListingContent]
  createdAt: String!
  updatedAt: String!
}
type ListingImage {
  id: Int!
  listingId: Int!
  imageUrl: String!
  createdAt: String!
  updatedAt: String!
}

type ListingDetail {
  id: Int!
  listingId: Int!
  condition: String
  age: String
  damages: [ListingDamage]
  createdAt: String!
  updatedAt: String!
}
type ListingDamage {
  id: Int!
  listingDetailId: Int!
  imageUrl: String!
  damageDetail: String!
  createdAt: String!
  updatedAt: String!
}
type ListingRental {
  id: Int!
  listingId: Int!
  perDay: Int!
  perWeek: Int
  perMonth: Int
  replacementValue: Int!
  createdAt: String!
  updatedAt: String!
}
type ListingContent {
  id: Int!
  listingId: Int!
  gear: String!
  brand: String!
  model: String!
  serial: String!
  createdAt: String!
  updatedAt: String!
}
type ListingEdges {
  node: Listing
  cursor: Int
}
type ListingPageInfo {
  endCursor: Int
  hasNextPage: Boolean
}
type Listings {
  totalCount: Int
  edges: [ListingEdges]
  pageInfo: ListingPageInfo
}
type ListingReview {
  id: Int!
  reviewer: [UserProfile]!
  listingId: String!
  comment: String!
  rating: String!
  createdAt: String!
  likesReplies: [UserReviewsLikes]
}

type WatchList {
  id: Int!
  listingId: Int!
  userId: Int!
  shouldNotify: String!
}

type UserReviewsLikes {
  id: Int!
  userId: Int!
  listingReviewId: Int!
  likeDisLike: String
  isReply: Boolean!
}

extend type Query {
  listings(limit: Int, after: Int): Listings
  listing(id: Int!): Listing
  userListings(userId: Int): [Listing]
  watchlist(userId: Int!): [WatchList]
  watchStatus(listingId: Int!, userId: Int): Boolean
  featuredListings: [Listing]
  reviews(reviewer_id: Int, reviewee_id: Int, listing_id: Int): [ListingReview]
  childReviews(id: Int!): [ListingReview]
}

type CountOFLikesDisLikes {
  likes: Int!
  disLikes: Int!
}

extend type Mutation {
  # Create new listing
  addListing(input: AddListingInput!): Listing
  # Delete a listing
  deleteListing(id: Int!): Listing
  # Edit a listing
  editListing(input: EditListingInput!): Listing

  # Add listingReview to listing
  addListingReview(input: AddListingReviewInput!): ListingReview
  # Delete a listingReview
  deleteListingReview(input: DeleteListingReviewInput!): ListingReview
  # Edit a listingReview
  editListingReview(input: EditListingReviewInput!): ListingReview

  toggleListingStatus(id: Int!): Listing

  #toggle isFeatured
  toggleListingIsFeatured(id: Int!, isFeatured: Boolean!): Boolean

  # to Add/Remove from watchlist
  addOrRemoveWatchList(
    user_id: Int!
    listing_id: Int!
    should_notify: Boolean
  ): String

  addReview(
    listing_id: Int!
    reviewer_id: Int!
    rating: Int!
    comment: String!
  ): Boolean

  addLikesDisLikes(ld: String!, review_id: Int!, reviewer_id: Int!): Boolean
  countLikesDisLikes(review_id: Int!): CountOFLikesDisLikes!
}

# Input for addListing Mutation
input ListingImageInput {
  id: Int
  imageUrl: String!
}
input ListingDetailInput {
  id: Int
  condition: String
  age: String
  damages: [ListingDamageInput]
}
input ListingDamageInput {
  id: Int
  imageUrl: String!
  damageDetail: String!
}
input ListingRentalInput {
  id: Int
  perDay: Int!
  perWeek: Int
  perMonth: Int
  replacementValue: Int!
}
input ListingContentInput {
  id: Int
  gear: String!
  brand: String!
  model: String!
  serial: String!
}
input AddListingInput {
  userId: Int
  gearCategory: String!
  gearSubcategory: String!
  description: String
  status: String
  isActive: Boolean
  isFeatured: Boolean
  listingImages: [ListingImageInput]
  listingDetail: ListingDetailInput
  listingRental: ListingRentalInput
  listingContent: [ListingContentInput]
}

# Input for editListing Mutation
input EditListingInput {
  id: Int!
  userId: Int
  gearCategory: String
  gearSubcategory: String
  description: String
  status: String
  isActive: Boolean
  isFeatured: Boolean
  listingImages: [ListingImageInput]
  listingDetail: ListingDetailInput
  listingRental: ListingRentalInput
  listingContent: [ListingContentInput]
}

# Input for addListingReview Mutation
input AddListingReviewInput {
  rating: String!
  comment: String!
  reviewerId: Int!
  # Needed for listingReviewUpdated Subscription filter
  listingId: Int!
  isReply: Boolean
  id: Int
}

# Input for editListingReview Mutation
input DeleteListingReviewInput {
  id: Int!
}

# Input for deleteListingReview Mutation
input EditListingReviewInput {
  id: Int!
  comment: String!
  rating: String!
  # Needed for listingReviewUpdated Subscription filter
  listingId: Int!
}

extend type Subscription {
  # Subscription for when editing a listing
  listingUpdated(id: Int!): UpdateListingPayload
  # Subscription for listing list
  listingsUpdated(endCursor: Int!): UpdateListingPayload
  # Subscription for listingReviews
  listingReviewUpdated(listingId: Int!): UpdateListingReviewPayload
}

# Payload for listingsUpdated Subscription
type UpdateListingPayload {
  mutation: String!
  id: Int!
  node: Listing
}

# Payload for listingReviewUpdated Subscription
type UpdateListingReviewPayload {
  mutation: String!
  id: Int
  listingId: Int!
  node: ListingReview
}
